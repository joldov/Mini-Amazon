from flask import current_app as app

from .purchase import Purchase
from .product import Product

from sqlalchemy import exc
from sqlalchemy import text

# CREATE TABLE Products (
#     id INT NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
#     name VARCHAR(255) UNIQUE NOT NULL,
#     descr VARCHAR(255) NOT NULL,
#     image_url VARCHAR(255) NOT NULL,
#     price DECIMAL(12,2) NOT NULL,
#     category_id INT NOT NULL,
#     available BOOLEAN DEFAULT TRUE,
#     seller_id INT NOT NULL REFERENCES Users(id),
#     quantity INT NOT NULL

class Inventory:
    def __init__(self, seller_id, pid, quantity, price_per_item):
        self.seller_id = seller_id
        self.pid = pid
        self.quantity = quantity
        self.price_per_item = price_per_item

    #display inventory of a particular seller
    @staticmethod
    def getInventory(seller_id):
        rows = app.db.execute('''
SELECT *
FROM Products
WHERE seller_id=:seller_id AND available = :available
ORDER BY name ASC''',
 seller_id = seller_id, available = True)
        
        return [Product(*row) for row in rows]
    
    # returns all products, sorted by price
    @staticmethod
    def getInventoryByPrice(seller_id):
        rows = app.db.execute('''
    SELECT *
    FROM Products
    WHERE seller_id=:seller_id AND available = :available
    ORDER BY price DESC''',
    seller_id = seller_id, available = True)
        
        return [Product(*row) for row in rows]
    
    # returns all products, sorted by quantity
    @staticmethod
    def getInventoryByQuantity(seller_id):
        rows = app.db.execute('''
    SELECT *
    FROM Products
    WHERE seller_id=:seller_id AND available = :available
    ORDER BY quantity DESC''',
    seller_id = seller_id, available = True)
        
        return [Product(*row) for row in rows]
    
    # returns all products with a specific search term
    @staticmethod
    def getInventoryBySearch(seller_id, search_term):
        rows = app.db.execute('''
    SELECT *
    FROM Products
    WHERE seller_id=:seller_id AND available = :available AND name LIKE :search_term
    ORDER BY name ASC''',
    seller_id = seller_id, available = True, search_term = f'%{search_term}%')
        
        return [Product(*row) for row in rows]

    #update product item's quantity
    @staticmethod
    def updateInventoryQuantity(id, newQuantity):
        rows = app.db.execute('''   
UPDATE Products
SET quantity = :newQuantity  
WHERE id = :id''', 
    id = id, newQuantity = newQuantity)
        
    #update product item's price
    @staticmethod
    def updateInventoryPrice(id, newPrice):
        rows = app.db.execute('''   
UPDATE Products
SET price = :newPrice   
WHERE id = :id''', 
    id = id, newPrice = newPrice)
    
    #delete an item from a sellers inventory
    @staticmethod
    def deleteItemFromInventory(id):
        rows = app.db.execute('''
UPDATE Products
SET available = :available
WHERE id = :id
''', 
    id = id, available = False)
        
    #add a new listing to a sellers inventory
    @staticmethod
    def addItemToInventory(name, descr, image_url, price, category_id, seller_id, quantity):
        try:
            rows = app.db.execute('''
INSERT INTO Products(name, descr, image_url, price, category_id, seller_id, quantity)
VALUES (:name, :descr, :image_url, :price, :category, :seller_id, :quantity)
''',
    name = name, descr = descr, image_url = image_url, price = price, category = category_id, seller_id = seller_id, quantity = quantity)
        except exc.DataError:
            return "Must have values entered in all required fields."

    #get all orders associated with a particular seller
    @staticmethod
    def getOrders(seller_id):
        rows = app.db.execute('''
SELECT u.full_name, p.name,  pur.amount, pur.number_of_items, u.address, pur.time_purchased, pur.status, pur.id
FROM Purchases as pur, Products as p, Users as u
WHERE pur.sid = :seller_id AND pur.pid = p.id AND pur.uid = u.id
ORDER BY time_purchased DESC
''',
    seller_id = seller_id)

        return [row for row in rows]
    
    @staticmethod
    def getOrdersByX(seller_id, filter_attr):

        if (filter_attr == "u.full_name") or (filter_attr == "p.name") or (filter_attr == "pur.status"):
            query = f'''
            SELECT u.full_name, p.name, pur.amount, pur.number_of_items, u.address, pur.time_purchased, pur.status, pur.id
            FROM Purchases as pur, Products as p, Users as u
            WHERE pur.sid = :seller_id AND pur.pid = p.id AND pur.uid = u.id
            ORDER BY {filter_attr} ASC
        '''
        else:
            query = f'''
                SELECT u.full_name, p.name, pur.amount, pur.number_of_items, u.address, pur.time_purchased, pur.status, pur.id
                FROM Purchases as pur, Products as p, Users as u
                WHERE pur.sid = :seller_id AND pur.pid = p.id AND pur.uid = u.id
                ORDER BY {filter_attr} DESC
            '''

        rows = app.db.execute(query, seller_id=seller_id)
        return [row for row in rows]
    
    # get all orders by a specific search term
    @staticmethod
    def getOrdersBySearch(seller_id, search_term):
        rows = app.db.execute('''
    SELECT u.full_name, p.name,  pur.amount, pur.number_of_items, u.address, pur.time_purchased, pur.status, pur.id
    FROM Purchases as pur, Products as p, Users as u
    WHERE pur.sid = :seller_id AND pur.pid = p.id AND pur.uid = u.id AND (u.full_name LIKE :search_term OR p.name LIKE :search_term OR u.address LIKE :search_term OR pur.status LIKE :search_term)
    ORDER BY u.full_name ASC''',
    seller_id = seller_id, available = True, search_term = f'%{search_term}%')
        
        return [row for row in rows]
    
    #get all orders associated with a particular seller
    @staticmethod
    def changeFullfillmentStatus(purchase_id):
        rows = app.db.execute('''
UPDATE Purchases
SET status = :status
WHERE id = :purchase_id
''',
    purchase_id=purchase_id, status = "shipped")
    
    #get a product's info
    @staticmethod
    def getInventoryItem(id):
        rows = app.db.execute('''
SELECT *
FROM Products as p
WHERE p.id = :id''',
id = id)
        
        return Product(*(rows[0])) if rows else None

    #check if a user is a seller
    @staticmethod
    def isSeller(id):
        rows = app.db.execute('''
SELECT seller
FROM Users
WHERE id = :id''',
id = id)
    
        return rows if rows else None